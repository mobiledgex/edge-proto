// Device service APIs

syntax = "proto3";
package distributed_match_engine;

import "google/api/annotations.proto";
import "loc.proto";
import "appcommon.proto";

enum IDTypes {
  ID_UNDEFINED = 0;
  IMEI = 1;
  MSISDN = 2;
  IPADDR = 3;
}

enum ReplyStatus {
  RS_UNDEFINED = 0;
  RS_SUCCESS = 1;
  RS_FAIL = 2;
}

message Tag {
  // type of data
  string type = 1;
  // data value
  string data = 2;
}

message RegisterClientRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // App Developer Name
  string org_name = 2;
  // App Name
  string app_name = 3;
  // App Version
  string app_vers = 4;
  /*
   * Carrier Name
   *
   * _(hidden)_ Reserved for future use
   */
  string carrier_name = 5;
  /*
   * Authentication Token
   *
   * _(optional)_ An authentication token supplied by the application.
   */
  string auth_token = 6;
  /*
   * Cell ID
   *
   * _(optional)_ Cellular ID of where the client is connected.
   */
  uint32 cell_id = 7;
  /*
   * Unique ID Type
   *
   * _(optional)_ Type of unique ID provided by the client.
   * If left blank, RegisterClientReply will contain generated Unique Id Type.
   */
  string unique_id_type = 8;
  /*
   * Unique ID
   *
   * _(optional)_ Unique identification of the client device or user. May be overridden by the server.
   * If left blank, RegisterClientReply will contain generated Unique Id.
   */
  string unique_id = 9;
  /*
   * Tags
   *
   * _(optional)_ Vendor specific data
   */
  repeated Tag tags = 99;
}

message RegisterClientReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  ReplyStatus status = 2;
  // Session Cookie to be used in later API calls
  string session_cookie = 3;
  // URI for the Token Server
  string token_server_uri = 4;
  /*
   * Unique ID Type
   *
   * _(optional)_ Type of unique ID provided by the server
   * If type of unique ID was provided in RegisterClientRequest API call this will be blank.
   */
  string unique_id_type = 5;
  /*
   * Unique ID
   *
   * _(optional)_ Unique identification of the client device or user
   * If unique ID was provided in RegisterClientRequest API call this will be blank.
   */
  string unique_id = 6;
  /* Vendor specific data
   *
   * _(optional)_ Array of Tags.
   */
  repeated Tag tags = 99;
}

message FindCloudletRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  /*
   * Session Cookie
   *
   * Session Cookie from RegisterClientRequest
   */
  string session_cookie = 2;
  /*
   * Carrier Name
   *
   * _(optional)_ Unique carrier identification (typically MCC + MNC)
   * If left blank, all carriers are searched
   */
  string carrier_name = 3;
  /*
   * GPS Location
   *
   * The GPS location of the user
   */
  Loc gps_location = 4;
  /*
   * Cell ID
   *
   * _(optional)_ Cell ID where the client is
   */
  uint32 cell_id = 8;
  /*
   * Tags
   *
   * _(optional)_ Vendor specific data
   */
  repeated Tag tags = 99;
}

message PlatformFindCloudletRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  /*
   * Session Cookie
   *
   * Session Cookie from RegisterClientRequest
   */
  string session_cookie = 2;
  /*
   * Carrier Name
   *
   * _(optional)_ Unique carrier identification (typically MCC + MNC)
   * If left blank, all carriers are searched
   */
  string carrier_name = 3;
  /*
   * Client Token
   *
   * Token with encoded client data
   */
  string client_token = 4;
  /*
   * Tags
   *
   * _(optional)_ Vendor specific data
   */
  repeated Tag tags = 99;
}

message FindCloudletReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  enum FindStatus {
    FIND_UNKNOWN = 0;
    FIND_FOUND = 1;
    FIND_NOTFOUND = 2;
  }
  // Status return
  FindStatus status = 2;
  // Fully Qualified Domain Name of the Closest App instance
  string fqdn = 3;
  // List of Service Endpoints for AppInst
  repeated AppPort ports = 4;
  // Location of the cloudlet
  Loc cloudlet_location = 5;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

message VerifyLocationRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  /*
   * Session Cookie
   *
   * Session Cookie from RegisterClientRequest
   */
  string session_cookie = 2;
  /*
   * Carrier Name
   *
   * Unique carrier identification (typically MCC + MNC)
   */
  string carrier_name = 3;
  /*
   * GPS Location
   *
   * The GPS location to verify
   */
  Loc gps_location = 4;
  /*
   * Verify Location Token
   *
   * Must be retrieved from TokenServerURI
   */
  string verify_loc_token = 5;
  /*
   * Cell ID
   *
   * _(optional)_ Cell ID where the client is
   */
  uint32 cell_id = 6;
  /*
   * Tags
   *
   * _(optional)_ Vendor specific data
   */
  repeated Tag tags = 99;
}

message VerifyLocationReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  enum TowerStatus {
    TOWER_UNKNOWN = 0;
    CONNECTED_TO_SPECIFIED_TOWER = 1;
    NOT_CONNECTED_TO_SPECIFIED_TOWER = 2;
  }
  TowerStatus tower_status = 2;
  enum GPSLocationStatus {
    LOC_UNKNOWN = 0;
    LOC_VERIFIED = 1;
    LOC_MISMATCH_SAME_COUNTRY = 2;
    LOC_MISMATCH_OTHER_COUNTRY = 3;
    LOC_ROAMING_COUNTRY_MATCH = 4;
    LOC_ROAMING_COUNTRY_MISMATCH = 5;
    LOC_ERROR_UNAUTHORIZED = 6;
    LOC_ERROR_OTHER = 7;
  }
  GPSLocationStatus gps_location_status = 3;
  // location accuracy, the location is verified to
  // be within this number of kilometers.  Negative value
  // means no verification was performed
  double gps_location_accuracy_km = 4;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

message GetLocationRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  // Unique carrier identification (typically MCC + MNC)
  string carrier_name = 3;
  // _(optional)_ Cell id where the client is
  uint32 cell_id = 4;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

message GetLocationReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  enum LocStatus {
    LOC_UNKNOWN = 0;
    LOC_FOUND = 1;
    // The user does not allow his location to be tracked
    LOC_DENIED = 2;
  }
  LocStatus status = 2;
  // Unique carrier identification (typically MCC + MNC)
  string carrier_name = 3;
  // The tower that the user is currently connected to
  uint64 tower = 4;
  // The GPS location of the user
  Loc network_location = 5;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

message AppInstListRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  /*
   * Carrier Name
   *
   * _(optional)_ Unique carrier identification (typically MCC + MNC)
   * If left blank, all carriers are searched
   */
  string carrier_name = 3;
  // The GPS location of the user
  Loc gps_location = 4;
  // _(optional)_ Cell id where the client is
  uint32 cell_id = 5;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

message Appinstance{
  // App Instance Name
  string app_name = 1;
  // App Instance Version
  string app_vers = 2;
  // App Instance FQDN
  string fqdn = 3;
  // ports to access app
  repeated AppPort ports = 4;
  // App Organization Name
  string org_name = 5;
}

message CloudletLocation {
  // Cloudlet Organization Name
  string carrier_name = 1;
  // Cloudlet Name
  string cloudlet_name = 2;
  // The GPS Location of the user
  Loc gps_location = 3;
  // Distance of cloudlet vs loc in request
  double distance = 4;
  // App instances
  repeated Appinstance appinstances = 5;
}

message AppInstListReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  enum AIStatus {
    AI_UNDEFINED = 0;
    AI_SUCCESS = 1;
    AI_FAIL = 2;
  }
  AIStatus status = 2;
  repeated CloudletLocation cloudlets = 3;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

message FqdnListRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  // _(optional)_ Cell id where the client is
  uint32 cell_id = 3;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

message AppFqdn{
  // App  Name
  string app_name = 1;
  // App Version
  string app_vers = 2;
  // App organization name
  string org_name = 3;
  // App FQDN
  repeated string fqdns = 4;
  // _(optional)_ Android package name
  string android_package_name = 5;
}

message FqdnListReply{
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  enum FLStatus {
    FL_UNDEFINED = 0;
    FL_SUCCESS = 1;
    FL_FAIL = 2;
  }
  repeated AppFqdn app_fqdns = 3;
  FLStatus status = 4;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

message AppOfficialFqdnRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  // The GPS location of the user
  Loc gps_location = 3;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

message AppOfficialFqdnReply{
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // The FQDN to which the app is reached independent of the edge
  string app_official_fqdn = 2;
  // Tokenized client data
  string client_token = 3;
  enum AOFStatus {
    AOF_UNDEFINED = 0;
    AOF_SUCCESS = 1;
    AOF_FAIL = 2;
  }
  // Status of the reply
  AOFStatus status = 4;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

message DynamicLocGroupRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  // Dynamic Location Group Id
  uint64 lg_id = 3;
  // Use Secure communication or Open with the group
  enum DlgCommType {
    DLG_UNDEFINED = 0;
    DLG_SECURE = 1;
    DLG_OPEN = 2;
  }
  DlgCommType comm_type = 11;
  // Unused
  string user_data = 12;
  // _(optional)_ Cell id where the client is
  uint32 cell_id = 13;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

message DynamicLocGroupReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  ReplyStatus status = 2;
  // Error Code based on Failure
  uint32 error_code = 3;
  // Group Cookie for Secure Group Communication
  string group_cookie = 5;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

message QosPosition{
  // as set by the client, must be unique within QosRequest
  int64 positionid = 1;
  //location
  Loc gps_location = 2;
}

// supported band values
message BandSelection {
    // Radio Access Technologies
    repeated string rat_2g = 1;
    repeated string rat_3g = 2;
    repeated string rat_4g = 3;
    repeated string rat_5g = 4;
}

// QosPositionRequest is used for both GetQosPositionKpi
message QosPositionRequest{
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  // list of positions
  repeated QosPosition positions = 3;
  // _(optional)_ Client's device LTE category number.
  int32 lte_category = 4;
  // _(optional)_ Band list used by the client.
  BandSelection band_selection = 5;
  // _(optional)_ Cell id where the client is
  uint32 cell_id = 6;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

message QosPositionKpiResult{
    // as set by the client, must be unique within one QosPositionRequest
    int64 positionid = 1;
    // the location which was requested
    Loc gps_location = 2;
    // throughput
    float dluserthroughput_min = 3;
    float dluserthroughput_avg = 4;
    float dluserthroughput_max = 5;
    float uluserthroughput_min = 6;
    float uluserthroughput_avg = 7;
    float uluserthroughput_max = 8;
    float latency_min = 9;
    float latency_avg = 10;
    float latency_max = 11;
}

message QosPositionKpiReply{
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  ReplyStatus status = 2;
  // kpi details
  repeated QosPositionKpiResult position_results = 3;
  // _(optional)_ Vendor specific data
  repeated Tag tags = 99;
}

service MatchEngineApi {
  /*
   * RegisterClient
   *
   * Registers the client with the closest Distributed Matching Engine (the
   * nearest edge location in the Operator network) and validates the
   * legitimacy of the mobile subscriber. All session information is encrypted.
   */
  rpc RegisterClient(RegisterClientRequest) returns (RegisterClientReply) {
    option (google.api.http) = {
      post: "/v1/registerclient"
      body: "*"
    };
  }
  /*
   * FindCloudlet
   *
   * Locates the most optimal edge computing footprint and allows the
   * registered application to find the application backend by leveraging the
   * location, application subscription, and service provider agreement. If
   * there are no suitable cloudlet instances available, the client may connect
   * to the application server located in the public cloud.
   */
  rpc FindCloudlet(FindCloudletRequest) returns (FindCloudletReply) {
    option (google.api.http) = {
      post: "/v1/findcloudlet"
      body: "*"
    };
  }

  /*
   * PlatformFindCloudlet
   *
   * Similar to FindCloudlet, except uses a token for client data.  
   * This API is only application for Platform Applications.
   */
  rpc PlatformFindCloudlet(PlatformFindCloudletRequest) returns (FindCloudletReply) {
    option (google.api.http) = {
      post: "/v1/platformfindcloudlet"
      body: "*"
    };
  }
  /*
   * VerifyLocation
   *
   * Verifies that the GPS coordinates accurately report the actual location of the device.
   */
  rpc VerifyLocation(VerifyLocationRequest) returns (VerifyLocationReply) {
    option (google.api.http) = {
      post: "/v1/verifylocation"
      body: "*"
    };
  }
  rpc GetLocation(GetLocationRequest) returns (GetLocationReply) {
    option (google.api.http) = {
      post: "/v1/getlocation"
      body: "*"
    };
  }
  rpc AddUserToGroup(DynamicLocGroupRequest) returns (DynamicLocGroupReply) {
    option (google.api.http) = {
      post: "/v1/addusertogroup"
      body: "*"
    };
  }
  rpc GetAppInstList(AppInstListRequest) returns (AppInstListReply) {
    option (google.api.http) = {
      post: "/v1/getappinstlist"
      body: "*"
    };
  }
  rpc GetFqdnList(FqdnListRequest) returns (FqdnListReply) {
    option (google.api.http) = {
      post: "/v1/getfqdnlist"
      body: "*"
    };
  }
  rpc GetAppOfficialFqdn(AppOfficialFqdnRequest) returns (AppOfficialFqdnReply) {
    option (google.api.http) = {
      post: "/v1/getappofficialfqdn"
      body: "*"
    };
  }
  rpc GetQosPositionKpi(QosPositionRequest) returns (stream QosPositionKpiReply) {
    option (google.api.http) = {
      post: "/v1/getqospositionkpi"
      body: "*"
    };
  }
}
