// Device service APIs

syntax = "proto3";
package distributed_match_engine;

import "google/api/annotations.proto";
import "loc.proto";
import "appcommon.proto";

enum IDTypes {
  ID_UNDEFINED = 0;
  IMEI = 1;
  MSISDN = 2;
  IPADDR = 3;
}

enum ReplyStatus {
  RS_UNDEFINED = 0;
  RS_SUCCESS = 1;
  RS_FAIL = 2;
}

enum QosSessionProfile {
  // Specifies that no priority session should be created
  QOS_NO_PRIORITY = 0;
  // Corresponds to a specific set of network parameters for low latency that will be 
  // negotiated with the network provider in advance
  QOS_LOW_LATENCY = 1;
  // Downlink traffic from AppInst to client is prioritized up to 20Mbps
  QOS_THROUGHPUT_DOWN_S = 2;
  // Downlink traffic from AppInst to client is prioritized up to 50Mbps
  QOS_THROUGHPUT_DOWN_M = 3;
  // Downlink traffic from AppInst to client is prioritized up to 100Mbps
  QOS_THROUGHPUT_DOWN_L = 4;
}

enum QosSessionProtocol {
  TCP = 0;
  UDP = 1;
  ANY = 2;
}

message RegisterClientRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  /*
  * App Organization Name
  *
  * App developer organization name.
 */
 string org_name= 2;
 /*
  * App Name
  *
  * Name of your application.
 */
 string app_name= 3;
 /*
  * App Version
  *
  * Application version.
 */
 string app_vers= 4;
  /*
   * Carrier Name
   *
   * _(hidden)_ Reserved for future use
   */
  string carrier_name = 5;
  /*
   * Authentication Token
   *
   * _(optional)_ An authentication token supplied by the application.
   */
  string auth_token = 6;
  /*
   * Cell ID
   *
   * _(removed)_ Cellular ID of where the client is connected.
   */
  reserved "cell_id";
  reserved 7;
  /*
   * Unique ID Type
   *
   * _(optional)_ Type of unique ID provided by the client.
   * If left blank, a new Unique ID type will be assigned in the RegisterClient Reply.
   */
  string unique_id_type = 8;
  /*
   * Unique ID
   *
   * _(optional)_ Unique identification of the client device or user. May be overridden by the server.
   * If left blank, a new Unique ID will be assigned in the RegisterClient Reply.
   */
  string unique_id = 9;
  /*
   * Tags
   *
   * _(optional)_ Vendor specific data
   */
  map<string, string> tags = 100;
}

message RegisterClientReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  ReplyStatus status = 2;
  // Session Cookie to be used in later API calls
  string session_cookie = 3;
  // URI for the Token Server
  string token_server_uri = 4;
  /*
   * Unique ID Type
   *
   * _(optional)_ Type of unique ID provided by the server
   * A unique_id_type and unique_id may be provided by the client to be registered.
   * During registering, if a unique_id_type and unique_id are provided by the client in their request,
   * the unique_id_type and unique_id will be left blank in the response.
   * But, if the client does not provide a unique_id_type and unique_id, then the server generates
   * one and provides the unique_id in the response. If possible, the unique_id should be saved by the
   * client locally and used for subsequent RegisterClient API calls. Otherwise, a new unique_id will be
   * generated for further API calls.
   */
  string unique_id_type = 5;
  /*
   * Unique ID
   *
   * _(optional)_ Unique identification of the client device or user
   * A unique_id_type and unique_id may be provided by the client to be registered.
   * During registering, if a unique_id_type and unique_id are provided by the client in their request,
   * the unique_id_type and unique_id will be left blank in the response.
   * But, if the client does not provide a unique_id_type and unique_id, then the server generates
   * one and provides the unique_id in the response. If possible, the unique_id should be saved by the
   * client locally and used for subsequent RegisterClient API calls. Otherwise, a new unique_id will be
   * generated for further API calls.
   */
  string unique_id = 6;
  /* Vendor specific data
   *
   * _(optional)_ Array of Tags.
   */
  map<string, string> tags = 100;
}

message FindCloudletRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  /*
   * Session Cookie
   *
   * Session Cookie from RegisterClientRequest
   */
  string session_cookie = 2;
  /*
   * Carrier Name
   *
   * _(optional)_ By default, all SDKs will automatically fill in this parameter with the MCC+MNC of your current provider. Only override this parameter if you need to filter for a specific carrier on the DME. The DME will filter for App instances that are associated with the specified carrier.
   * If you wish to search for any App Instance on the DME regardless of carrier name, you can input “” to consider all carriers as “Any”.
   */
  string carrier_name = 3;
  /*
   * GPS Location
   *
   * The GPS location of the user
   */
  Loc gps_location = 4;
  /*
   * Cell ID
   *
   * _(removed)_ Cell ID where the client is
   */
  reserved "cell_id";
  reserved 8;
  /*
   * Tags
   *
   * _(optional)_ Vendor specific data
   */
  map<string, string> tags = 100;
}

message PlatformFindCloudletRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  /*
   * Session Cookie
   *
   * Session Cookie from RegisterClientRequest
   */
  string session_cookie = 2;
  /*
   * Carrier Name
   *
   * _(optional)_ By default, all SDKs will automatically fill in this parameter with the MCC+MNC of your current provider. Only override this parameter if you need to filter for a specific carrier on the DME. The DME will filter for App instances that are associated with the specified carrier.
   * If you wish to search for any app instance on the DME regardless of carrier name, you can input “” to consider all carriers as “Any”.
   */
  string carrier_name = 3;
  /*
   * Client Token
   *
   * Token with encoded client data
   */
  string client_token = 4;
  /*
   * Tags
   *
   * _(optional)_ Vendor specific data
   */
  map<string, string> tags = 100;
}

message FindCloudletReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  enum FindStatus {
    FIND_UNKNOWN = 0;
    FIND_FOUND = 1;
    FIND_NOTFOUND = 2;
  }
  // Status return
  FindStatus status = 2;
  // Fully Qualified Domain Name of the Closest App instance
  string fqdn = 3;
  // List of Service Endpoints for AppInst
  repeated AppPort ports = 4;
  // Location of the cloudlet
  Loc cloudlet_location = 5;
  // Session Cookie for specific EdgeEvents for specific AppInst
  string edge_events_cookie = 6;

  enum QosSessionResult {
    QOS_NOT_ATTEMPTED = 0;
    QOS_SESSION_CREATED = 1;
    QOS_SESSION_FAILED = 2;
  }
  // Result of QOS priority session creation attempt
  QosSessionResult qos_result = 7; 
  // Error message in case of QOS_SESSION_FAILED
  string qos_error_msg = 8;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message QosPrioritySessionCreateRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  /*
   * Session Cookie from RegisterClientRequest
   */
  string session_cookie = 2;
  /*
  * _(optional)_ QOS Priority Session duration in seconds
  */
  uint32 session_duration = 3;
  /*
   * IP address of mobile device
   */
  string ip_user_equipment = 4;
  /*
   * IP address of the application server
   */
  string ip_application_server = 5;
  /*
   * _(optional)_ A list of single ports or port ranges on the user equipment.
   */
  string port_user_equipment = 6;
  /*
   * _(optional)_ A list of single ports or port ranges on the application server
   */
  string port_application_server = 7;
  /*
   * _(optional)_ The used transport protocol for the uplink
   */
  QosSessionProtocol protocol_in = 8;
  /*
   * _(optional)_ The used transport protocol for the downlink
   */
  QosSessionProtocol protocol_out = 9;
  /*
   * QOS Priority Session profile name
   */
  QosSessionProfile profile = 10;
  /*
   *  _(optional)_ URI of the callback receiver. Allows asynchronous delivery of session related events.
   */
  string notification_uri = 11;
  /*
   * _(optional)_ Authentification token for callback API
   */
  string notification_auth_token = 12;
  /*
   * _(optional)_ Vendor specific data
   */
  map<string, string> tags = 100;
}

message QosPrioritySessionReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  /*
  * QOS Priority Session duration in seconds
  */
  uint32 session_duration = 2;
  /*
   * QOS Priority Session profile name
   */
  QosSessionProfile profile = 3;
  /*
   * Session ID in UUID format
   */
  string session_id = 4;
  /*
   * Timestamp of session start in seconds since unix epoch
   */
  uint32 started_at = 5;
  /*
   * Timestamp of session expiration if the session was not deleted in seconds since unix epoch
   */
  uint32 expires_at = 6;
  /*
   * HTTP Status Code of call to operator's API server.
   */
  uint32 http_status = 7;
   /*
   * _(optional)_ Vendor specific data
   */
  map<string, string> tags = 100;
}

message QosPrioritySessionDeleteRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  /*
   * Session Cookie from RegisterClientRequest
   */
   string session_cookie = 2;
  /*
   * QOS Priority Session profile name
   */
   QosSessionProfile profile = 3;
   /*
   * QOS Priority Session ID to be deleted
   */
   string session_id = 4;
   /*
   * _(optional)_ Vendor specific data
   */
  map<string, string> tags = 100;
}

message QosPrioritySessionDeleteReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;

  enum DeleteStatus {
    QDEL_UNKNOWN = 0;
    QDEL_DELETED = 1;
    QDEL_NOT_FOUND = 2;
  }
  // Status return.
  DeleteStatus status = 2;
  /*
   * _(optional)_ Vendor specific data
   */
  map<string, string> tags = 100;
}

message VerifyLocationRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  /*
   * Session Cookie
   *
   * Session Cookie from RegisterClientRequest
   */
  string session_cookie = 2;
  /*
   * Carrier Name
   *
   * Unique carrier identification (typically MCC + MNC)
   */
  string carrier_name = 3;
  /*
   * GPS Location
   *
   * The GPS location to verify
   */
  Loc gps_location = 4;
  /*
   * Verify Location Token
   *
   * Must be retrieved from TokenServerURI
   */
  string verify_loc_token = 5;
  /*
   * Cell ID
   *
   * _(removed)_ Cell ID where the client is
   */
  reserved "cell_id";
  reserved 6;
  /*
   * Tags
   *
   * _(optional)_ Vendor specific data
   */
  map<string, string> tags = 100;
}

message VerifyLocationReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  enum TowerStatus {
    TOWER_UNKNOWN = 0;
    CONNECTED_TO_SPECIFIED_TOWER = 1;
    NOT_CONNECTED_TO_SPECIFIED_TOWER = 2;
  }
  TowerStatus tower_status = 2;
  enum GPSLocationStatus {
    LOC_UNKNOWN = 0;
    LOC_VERIFIED = 1;
    LOC_MISMATCH_SAME_COUNTRY = 2;
    LOC_MISMATCH_OTHER_COUNTRY = 3;
    LOC_ROAMING_COUNTRY_MATCH = 4;
    LOC_ROAMING_COUNTRY_MISMATCH = 5;
    LOC_ERROR_UNAUTHORIZED = 6;
    LOC_ERROR_OTHER = 7;
  }
  GPSLocationStatus gps_location_status = 3;
  // location accuracy, the location is verified to
  // be within this number of kilometers.  Negative value
  // means no verification was performed
  double gps_location_accuracy_km = 4;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message GetLocationRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  // Unique carrier identification (typically MCC + MNC)
  string carrier_name = 3;
  // _(removed)_ Cell id where the client is
  reserved "cell_id";
  reserved 4;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message GetLocationReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  enum LocStatus {
    LOC_UNKNOWN = 0;
    LOC_FOUND = 1;
    // The user does not allow his location to be tracked
    LOC_DENIED = 2;
  }
  LocStatus status = 2;
  // Unique carrier identification (typically MCC + MNC)
  string carrier_name = 3;
  // The tower that the user is currently connected to
  uint64 tower = 4;
  // The GPS location of the user
  Loc network_location = 5;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message AppInstListRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  /*
   * Carrier Name
   *
   * _(optional)_ By default, all SDKs will automatically fill in this parameter with the MCC+MNC of your current provider. Only override this parameter if you need to filter for a specific carrier on the DME. The DME will filter for App instances that are associated with the specified carrier.
   * If you wish to search for any App Instance on the DME regardless of carrier name, you can input “” to consider all carriers as “Any”.
   */
  string carrier_name = 3;
  // The GPS location of the user
  Loc gps_location = 4;
  // _(removed)_ Cell id where the client is
  reserved "cell_id";
  reserved 5;
  // _(optional)_ Limit the number of results, defaults to 3
  uint32 limit = 6;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message Appinstance{
  // App Instance Name
  string app_name = 1;
  // App Instance Version
  string app_vers = 2;
  // App Instance FQDN
  string fqdn = 3;
  // ports to access app
  repeated AppPort ports = 4;
  // App Organization Name
  string org_name = 5;
  // Session Cookie for specific EdgeEvents for specific AppInst
  string edge_events_cookie = 6;
}

message CloudletLocation {
  // Cloudlet Organization Name
  string carrier_name = 1;
  // Cloudlet Name
  string cloudlet_name = 2;
  // The GPS Location of the cloudlet
  Loc gps_location = 3;
  // Distance of cloudlet vs loc in request
  double distance = 4;
  // App instances
  repeated Appinstance appinstances = 5;
}

message AppInstListReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  enum AIStatus {
    AI_UNDEFINED = 0;
    AI_SUCCESS = 1;
    AI_FAIL = 2;
  }
  AIStatus status = 2;
  repeated CloudletLocation cloudlets = 3;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message FqdnListRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  // _(removed)_ Cell id where the client is
  reserved "cell_id";
  reserved 3;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message AppFqdn{
  // App  Name
  string app_name = 1;
  // App Version
  string app_vers = 2;
  // App organization name
  string org_name = 3;
  // App FQDN
  repeated string fqdns = 4;
  // _(optional)_ Android package name
  string android_package_name = 5;
}

message FqdnListReply{
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  enum FLStatus {
    FL_UNDEFINED = 0;
    FL_SUCCESS = 1;
    FL_FAIL = 2;
  }
  repeated AppFqdn app_fqdns = 3;
  FLStatus status = 4;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message AppOfficialFqdnRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  // The GPS location of the user
  Loc gps_location = 3;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message AppOfficialFqdnReply{
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // The FQDN to which the app is reached independent of the edge
  string app_official_fqdn = 2;
  // Tokenized client data
  string client_token = 3;
  enum AOFStatus {
    AOF_UNDEFINED = 0;
    AOF_SUCCESS = 1;
    AOF_FAIL = 2;
  }
  // Status of the reply
  AOFStatus status = 4;
  // List of Service Endpoints for AppInst
  repeated AppPort ports = 5;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message DynamicLocGroupRequest {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  // Dynamic Location Group Id
  uint64 lg_id = 3;
  // Use Secure communication or Open with the group
  enum DlgCommType {
    DLG_UNDEFINED = 0;
    DLG_SECURE = 1;
    DLG_OPEN = 2;
  }
  DlgCommType comm_type = 11;
  // Unused
  string user_data = 12;
  // _(removed)_ Cell id where the client is
  reserved "cell_id";
  reserved 13;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message DynamicLocGroupReply {
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  ReplyStatus status = 2;
  // Error Code based on Failure
  uint32 error_code = 3;
  // Group Cookie for Secure Group Communication
  string group_cookie = 5;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message QosPosition{
  // as set by the client, must be unique within QosRequest
  int64 positionid = 1;
  //location
  Loc gps_location = 2;
}

// supported band values
message BandSelection {
    // Radio Access Technologies
    repeated string rat2g = 1;
    repeated string rat3g = 2;
    repeated string rat4g = 3;
    repeated string rat5g = 4;
}

// QosPositionRequest is used for both GetQosPositionKpi
message QosPositionRequest{
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Session Cookie from RegisterClientRequest
  string session_cookie = 2;
  // list of positions
  repeated QosPosition positions = 3;
  // _(optional)_ Client's device LTE category number.
  int32 lte_category = 4;
  // _(optional)_ Band list used by the client.
  BandSelection band_selection = 5;
  // _(removed)_ Cell id where the client is
  reserved "cell_id";
  reserved 6;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

message QosPositionKpiResult{
  // as set by the client, must be unique within one QosPositionRequest
  int64 positionid = 1;
  // the location which was requested
  Loc gps_location = 2;
  // throughput
  float dluserthroughput_min = 3;
  float dluserthroughput_avg = 4;
  float dluserthroughput_max = 5;
  float uluserthroughput_min = 6;
  float uluserthroughput_avg = 7;
  float uluserthroughput_max = 8;
  float latency_min = 9;
  float latency_avg = 10;
  float latency_max = 11;
}

message QosPositionKpiReply{
  /*
   * API version
   *
   * _(hidden)_ Reserved for future use
   */
  uint32 ver = 1;
  // Status of the reply
  ReplyStatus status = 2;
  // kpi details
  repeated QosPositionKpiResult position_results = 3;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

// Messages from SDK to DME
message ClientEdgeEvent {
  // Session Cookie from RegisterClientReply
  string session_cookie = 1;
  // Session Cookie from FindCloudletReply 
  string edge_events_cookie = 2;
  enum ClientEventType {
    EVENT_UNKNOWN = 0;
    EVENT_INIT_CONNECTION = 1;
    EVENT_TERMINATE_CONNECTION = 2;
    EVENT_LATENCY_SAMPLES = 3;
    EVENT_LOCATION_UPDATE = 4;
    EVENT_CUSTOM_EVENT = 5;
  }
  ClientEventType event_type = 3;
  // GPS Location info if event_type is EVENT_LOCATION_UPDATE or EVENT_LATENCY_SAMPLES
  Loc gps_location = 4;
  // Latency Samples if event_type is EVENT_LATENCY_SAMPLES or EVENT_CUSTOM_EVENT
  repeated Sample samples = 5;
  /* 
   * _(optional)_ Static device information for latency and deviceinfo stats 
   * Send on EVENT_INIT_CONNECTION to get this information in latency stats and deviceinfo stats
   */ 
  DeviceInfoStatic device_info_static = 6;
  /*
   * _(optional)_ Dynamic device information for latency and deviceinfo stats
   * Send on EVENT_INIT_CONNECTION to get this information in first deviceinfo stat
   * Send on EVENT_LOCATION_UPDATE to get this information in dynamic deviceinfo stats
   * Send on EVENT_LATENCY_SAMPLES to get this information in latency stats
   */
  DeviceInfoDynamic device_info_dynamic = 7;
  // Custom event specified by the application
  string custom_event = 8;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

// Message from DME to SDK
message ServerEdgeEvent {
  enum ServerEventType {
    EVENT_UNKNOWN = 0;
    EVENT_INIT_CONNECTION = 1;
    EVENT_LATENCY_REQUEST = 2;
    EVENT_LATENCY_PROCESSED = 3;
    EVENT_CLOUDLET_STATE = 4;
    EVENT_CLOUDLET_MAINTENANCE = 5;
    EVENT_APPINST_HEALTH = 6;
    EVENT_CLOUDLET_UPDATE = 7;
    EVENT_ERROR = 8;
  }
  ServerEventType event_type = 1;
  // Cloudlet state information if cloudlet state is not CLOUDLET_STATE_READY
  CloudletState cloudlet_state = 2;
  // Cloudlet maintenance state information if maintenance state is not NORMAL_OPERATION
  MaintenanceState maintenance_state = 3;
  // AppInst health state information if health check is not HEALTH_CHECK_OK
  HealthCheck health_check = 4;
  // Summarized RTT Latency stats from samples provided from client if event_type is EVENT_LATENCY
  Statistics statistics = 5;
  /* 
   * New and closer cloudlet if event_type is EVENT_CLOUDLET_UPDATE.
   * (EVENT_CLOUDLET_UPDATE occurs if the client is closer to a different cloudlet, or a new closer appinst is created, or a previously down appinst/cloudlet that is closest to the client is now operational)
   * Also sent on EVENT_CLOUDLET_STATE if another cloudlet is available
   * Also sent on EVENT_CLOUDLET_MAINTENANCE, if another cloudlet is available and maintenance_state == UNDER_MAINTENANCE
   * Also sent on EVENT_APPINST_HEALTH, if another cloudlet is available and health_check != HEALTH_CHECK_UNKNOWN
   */
  FindCloudletReply new_cloudlet = 6;
  // Error message if event_type is EVENT_ERROR
  string error_msg = 7;
  // _(optional)_ Vendor specific data
  map<string, string> tags = 100;
}

service MatchEngineApi {
  /*
   * RegisterClient
   *
   * Registers the client with the closest Distributed Matching Engine (the
   * nearest edge location in the Operator network) and validates the
   * legitimacy of the mobile subscriber. All session information is encrypted.
   */
  rpc RegisterClient(RegisterClientRequest) returns (RegisterClientReply) {
    option (google.api.http) = {
      post: "/v1/registerclient"
      body: "*"
    };
  }
  /*
   * FindCloudlet
   *
   * Locates the most optimal edge computing footprint and allows the
   * registered application to find the application backend by leveraging the
   * location, application subscription, and service provider agreement. If
   * there are no suitable cloudlet instances available, the client may connect
   * to the application server located in the public cloud.
   */
   rpc FindCloudlet(FindCloudletRequest) returns (FindCloudletReply) {
    option (google.api.http) = {
      post: "/v1/findcloudlet"
      body: "*"
    };
  }

  /*
   * PlatformFindCloudlet
   *
   * Similar to FindCloudlet, except uses a token for client data.
   * This API is only applicable for Platform Applications.
   */
  rpc PlatformFindCloudlet(PlatformFindCloudletRequest) returns (FindCloudletReply) {
    option (google.api.http) = {
      post: "/v1/platformfindcloudlet"
      body: "*"
    };
  }

  /*
   * QosPrioritySessionCreate
   *
   * Creates a QOS priority session (latency or throughput priority) from the client
   * to the app inst by making a call to the operator's priority session API server.
   */
   rpc QosPrioritySessionCreate(QosPrioritySessionCreateRequest) returns (QosPrioritySessionReply) {
    option (google.api.http) = {
      post: "/v1/qosprioritysessioncreate"
      body: "*"
    };
  }

  /*
   * QosPrioritySessionDelete
   *
   * Deletes a previously created QOS priority session by making a call to the operator's 
   * priority session API server.
   */
   rpc QosPrioritySessionDelete(QosPrioritySessionDeleteRequest) returns (QosPrioritySessionDeleteReply) {
    option (google.api.http) = {
      post: "/v1/qosprioritysessiondelete"
      body: "*"
    };
  }

  /*
   * VerifyLocation
   *
   * Verifies that the GPS coordinates accurately report the actual location of the device.
   */
  rpc VerifyLocation(VerifyLocationRequest) returns (VerifyLocationReply) {
    option (google.api.http) = {
      post: "/v1/verifylocation"
      body: "*"
    };
  }
  rpc GetLocation(GetLocationRequest) returns (GetLocationReply) {
    option (google.api.http) = {
      post: "/v1/getlocation"
      body: "*"
    };
  }
  rpc AddUserToGroup(DynamicLocGroupRequest) returns (DynamicLocGroupReply) {
    option (google.api.http) = {
      post: "/v1/addusertogroup"
      body: "*"
    };
  }
  rpc GetAppInstList(AppInstListRequest) returns (AppInstListReply) {
    option (google.api.http) = {
      post: "/v1/getappinstlist"
      body: "*"
    };
  }
  rpc GetFqdnList(FqdnListRequest) returns (FqdnListReply) {
    option (google.api.http) = {
      post: "/v1/getfqdnlist"
      body: "*"
    };
  }
  rpc GetAppOfficialFqdn(AppOfficialFqdnRequest) returns (AppOfficialFqdnReply) {
    option (google.api.http) = {
      post: "/v1/getappofficialfqdn"
      body: "*"
    };
  }
  rpc GetQosPositionKpi(QosPositionRequest) returns (stream QosPositionKpiReply) {
    option (google.api.http) = {
      post: "/v1/getqospositionkpi"
      body: "*"
    };
  }
  rpc StreamEdgeEvent(stream ClientEdgeEvent) returns (stream ServerEdgeEvent) {
    option (google.api.http) = {
      post: "/v1/streamedgeevent"
      body: "*"
    };
  }
}
